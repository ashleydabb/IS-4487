{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ashleydabb/IS-4487/blob/main/Lab1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Ashley Dabb"
      ],
      "metadata": {
        "id": "bvMGIB3SD5Xy"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p_Yu45OYdj3Y"
      },
      "source": [
        "# IS 4487 Module 1 Script\n",
        "\n",
        "## Agenda\n",
        "\n",
        "- Loading installed packages\n",
        "- Inspect data\n",
        "- Explore plot types \n",
        "\n",
        "Make sure you have downloaded tonight's script and data from Canvas."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UE93RwXhgiJS"
      },
      "source": [
        "##Load Libraries\n",
        "\n",
        "In this class we will be using \n",
        "- Pandas\n",
        "- Scikitlearn\n",
        "- Matplotlib\n",
        "\n",
        "We can pull sample data from \n",
        "- statsmodels.api"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JYRZY5n0gfNe"
      },
      "source": [
        "import pandas as pd\n",
        "import matplotlib as mpl\n",
        "import sklearn as sl\n",
        "import statsmodels.api as sm"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bREaXo8jfu-O"
      },
      "source": [
        "## Getting data into Pandas\n",
        "\n",
        "In this case we will load data from the statsmodels.org library\n",
        "\n",
        "MTCARS is a traditional dataset used for learning.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6_FwprxVgR0e",
        "outputId": "3b255323-af3d-4666-e030-784a63b6d011"
      },
      "source": [
        "mtcars = sm.datasets.get_rdataset(\"mtcars\", \"datasets\", cache=True).data\n",
        "df = pd.DataFrame(mtcars)\n",
        "print(df)"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                      mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  \\\n",
            "Mazda RX4            21.0    6  160.0  110  3.90  2.620  16.46   0   1     4   \n",
            "Mazda RX4 Wag        21.0    6  160.0  110  3.90  2.875  17.02   0   1     4   \n",
            "Datsun 710           22.8    4  108.0   93  3.85  2.320  18.61   1   1     4   \n",
            "Hornet 4 Drive       21.4    6  258.0  110  3.08  3.215  19.44   1   0     3   \n",
            "Hornet Sportabout    18.7    8  360.0  175  3.15  3.440  17.02   0   0     3   \n",
            "Valiant              18.1    6  225.0  105  2.76  3.460  20.22   1   0     3   \n",
            "Duster 360           14.3    8  360.0  245  3.21  3.570  15.84   0   0     3   \n",
            "Merc 240D            24.4    4  146.7   62  3.69  3.190  20.00   1   0     4   \n",
            "Merc 230             22.8    4  140.8   95  3.92  3.150  22.90   1   0     4   \n",
            "Merc 280             19.2    6  167.6  123  3.92  3.440  18.30   1   0     4   \n",
            "Merc 280C            17.8    6  167.6  123  3.92  3.440  18.90   1   0     4   \n",
            "Merc 450SE           16.4    8  275.8  180  3.07  4.070  17.40   0   0     3   \n",
            "Merc 450SL           17.3    8  275.8  180  3.07  3.730  17.60   0   0     3   \n",
            "Merc 450SLC          15.2    8  275.8  180  3.07  3.780  18.00   0   0     3   \n",
            "Cadillac Fleetwood   10.4    8  472.0  205  2.93  5.250  17.98   0   0     3   \n",
            "Lincoln Continental  10.4    8  460.0  215  3.00  5.424  17.82   0   0     3   \n",
            "Chrysler Imperial    14.7    8  440.0  230  3.23  5.345  17.42   0   0     3   \n",
            "Fiat 128             32.4    4   78.7   66  4.08  2.200  19.47   1   1     4   \n",
            "Honda Civic          30.4    4   75.7   52  4.93  1.615  18.52   1   1     4   \n",
            "Toyota Corolla       33.9    4   71.1   65  4.22  1.835  19.90   1   1     4   \n",
            "Toyota Corona        21.5    4  120.1   97  3.70  2.465  20.01   1   0     3   \n",
            "Dodge Challenger     15.5    8  318.0  150  2.76  3.520  16.87   0   0     3   \n",
            "AMC Javelin          15.2    8  304.0  150  3.15  3.435  17.30   0   0     3   \n",
            "Camaro Z28           13.3    8  350.0  245  3.73  3.840  15.41   0   0     3   \n",
            "Pontiac Firebird     19.2    8  400.0  175  3.08  3.845  17.05   0   0     3   \n",
            "Fiat X1-9            27.3    4   79.0   66  4.08  1.935  18.90   1   1     4   \n",
            "Porsche 914-2        26.0    4  120.3   91  4.43  2.140  16.70   0   1     5   \n",
            "Lotus Europa         30.4    4   95.1  113  3.77  1.513  16.90   1   1     5   \n",
            "Ford Pantera L       15.8    8  351.0  264  4.22  3.170  14.50   0   1     5   \n",
            "Ferrari Dino         19.7    6  145.0  175  3.62  2.770  15.50   0   1     5   \n",
            "Maserati Bora        15.0    8  301.0  335  3.54  3.570  14.60   0   1     5   \n",
            "Volvo 142E           21.4    4  121.0  109  4.11  2.780  18.60   1   1     4   \n",
            "\n",
            "                     carb  \n",
            "Mazda RX4               4  \n",
            "Mazda RX4 Wag           4  \n",
            "Datsun 710              1  \n",
            "Hornet 4 Drive          1  \n",
            "Hornet Sportabout       2  \n",
            "Valiant                 1  \n",
            "Duster 360              4  \n",
            "Merc 240D               2  \n",
            "Merc 230                2  \n",
            "Merc 280                4  \n",
            "Merc 280C               4  \n",
            "Merc 450SE              3  \n",
            "Merc 450SL              3  \n",
            "Merc 450SLC             3  \n",
            "Cadillac Fleetwood      4  \n",
            "Lincoln Continental     4  \n",
            "Chrysler Imperial       4  \n",
            "Fiat 128                1  \n",
            "Honda Civic             2  \n",
            "Toyota Corolla          1  \n",
            "Toyota Corona           1  \n",
            "Dodge Challenger        2  \n",
            "AMC Javelin             2  \n",
            "Camaro Z28              4  \n",
            "Pontiac Firebird        2  \n",
            "Fiat X1-9               1  \n",
            "Porsche 914-2           2  \n",
            "Lotus Europa            2  \n",
            "Ford Pantera L          4  \n",
            "Ferrari Dino            6  \n",
            "Maserati Bora           8  \n",
            "Volvo 142E              2  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UlxcLPS-m0NO"
      },
      "source": [
        "## Preview Data\n",
        "\n",
        "Use the following data dictionary to understand the attributes available\n",
        "\n",
        "|Attribute | Description |\n",
        "|---------|--------------|\n",
        "|\tmpg\t|Miles/(US) gallon|\n",
        "|\tcyl|\tNumber of cylinders|\n",
        "|\tdisp|\tDisplacement (cu.in.)|\n",
        "|hp|\tGross horsepower|\n",
        "|drat|\tRear axle ratio|\n",
        "|wt|\tWeight (1000 lbs)|\n",
        "|qsec|\t1/4 mile time|\n",
        "|vs|\tEngine (0 = V-shaped, 1 = straight)|\n",
        "|am|\tTransmission (0 = automatic, 1 = manual)|\n",
        "|gear|\tNumber of forward gears|"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#look at the top rows\n",
        "df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "5EzCOiF-Gpp4",
        "outputId": "027764a2-4f37-4cff-c74b-cee613f6850e"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  \\\n",
              "Mazda RX4          21.0    6  160.0  110  3.90  2.620  16.46   0   1     4   \n",
              "Mazda RX4 Wag      21.0    6  160.0  110  3.90  2.875  17.02   0   1     4   \n",
              "Datsun 710         22.8    4  108.0   93  3.85  2.320  18.61   1   1     4   \n",
              "Hornet 4 Drive     21.4    6  258.0  110  3.08  3.215  19.44   1   0     3   \n",
              "Hornet Sportabout  18.7    8  360.0  175  3.15  3.440  17.02   0   0     3   \n",
              "Valiant            18.1    6  225.0  105  2.76  3.460  20.22   1   0     3   \n",
              "Duster 360         14.3    8  360.0  245  3.21  3.570  15.84   0   0     3   \n",
              "Merc 240D          24.4    4  146.7   62  3.69  3.190  20.00   1   0     4   \n",
              "Merc 230           22.8    4  140.8   95  3.92  3.150  22.90   1   0     4   \n",
              "Merc 280           19.2    6  167.6  123  3.92  3.440  18.30   1   0     4   \n",
              "\n",
              "                   carb  \n",
              "Mazda RX4             4  \n",
              "Mazda RX4 Wag         4  \n",
              "Datsun 710            1  \n",
              "Hornet 4 Drive        1  \n",
              "Hornet Sportabout     2  \n",
              "Valiant               1  \n",
              "Duster 360            4  \n",
              "Merc 240D             2  \n",
              "Merc 230              2  \n",
              "Merc 280              4  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4a1bab25-b8d3-426b-8bdc-a8c8231bc00c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpg</th>\n",
              "      <th>cyl</th>\n",
              "      <th>disp</th>\n",
              "      <th>hp</th>\n",
              "      <th>drat</th>\n",
              "      <th>wt</th>\n",
              "      <th>qsec</th>\n",
              "      <th>vs</th>\n",
              "      <th>am</th>\n",
              "      <th>gear</th>\n",
              "      <th>carb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Mazda RX4</th>\n",
              "      <td>21.0</td>\n",
              "      <td>6</td>\n",
              "      <td>160.0</td>\n",
              "      <td>110</td>\n",
              "      <td>3.90</td>\n",
              "      <td>2.620</td>\n",
              "      <td>16.46</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mazda RX4 Wag</th>\n",
              "      <td>21.0</td>\n",
              "      <td>6</td>\n",
              "      <td>160.0</td>\n",
              "      <td>110</td>\n",
              "      <td>3.90</td>\n",
              "      <td>2.875</td>\n",
              "      <td>17.02</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Datsun 710</th>\n",
              "      <td>22.8</td>\n",
              "      <td>4</td>\n",
              "      <td>108.0</td>\n",
              "      <td>93</td>\n",
              "      <td>3.85</td>\n",
              "      <td>2.320</td>\n",
              "      <td>18.61</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Hornet 4 Drive</th>\n",
              "      <td>21.4</td>\n",
              "      <td>6</td>\n",
              "      <td>258.0</td>\n",
              "      <td>110</td>\n",
              "      <td>3.08</td>\n",
              "      <td>3.215</td>\n",
              "      <td>19.44</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Hornet Sportabout</th>\n",
              "      <td>18.7</td>\n",
              "      <td>8</td>\n",
              "      <td>360.0</td>\n",
              "      <td>175</td>\n",
              "      <td>3.15</td>\n",
              "      <td>3.440</td>\n",
              "      <td>17.02</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Valiant</th>\n",
              "      <td>18.1</td>\n",
              "      <td>6</td>\n",
              "      <td>225.0</td>\n",
              "      <td>105</td>\n",
              "      <td>2.76</td>\n",
              "      <td>3.460</td>\n",
              "      <td>20.22</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Duster 360</th>\n",
              "      <td>14.3</td>\n",
              "      <td>8</td>\n",
              "      <td>360.0</td>\n",
              "      <td>245</td>\n",
              "      <td>3.21</td>\n",
              "      <td>3.570</td>\n",
              "      <td>15.84</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Merc 240D</th>\n",
              "      <td>24.4</td>\n",
              "      <td>4</td>\n",
              "      <td>146.7</td>\n",
              "      <td>62</td>\n",
              "      <td>3.69</td>\n",
              "      <td>3.190</td>\n",
              "      <td>20.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Merc 230</th>\n",
              "      <td>22.8</td>\n",
              "      <td>4</td>\n",
              "      <td>140.8</td>\n",
              "      <td>95</td>\n",
              "      <td>3.92</td>\n",
              "      <td>3.150</td>\n",
              "      <td>22.90</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Merc 280</th>\n",
              "      <td>19.2</td>\n",
              "      <td>6</td>\n",
              "      <td>167.6</td>\n",
              "      <td>123</td>\n",
              "      <td>3.92</td>\n",
              "      <td>3.440</td>\n",
              "      <td>18.30</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a1bab25-b8d3-426b-8bdc-a8c8231bc00c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4a1bab25-b8d3-426b-8bdc-a8c8231bc00c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4a1bab25-b8d3-426b-8bdc-a8c8231bc00c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gSvao0dlhlNn",
        "outputId": "a6864f0e-e469-4988-8ce8-af094d142263"
      },
      "source": [
        "\n",
        "df.info()"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 32 entries, Mazda RX4 to Volvo 142E\n",
            "Data columns (total 11 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   mpg     32 non-null     float64\n",
            " 1   cyl     32 non-null     int64  \n",
            " 2   disp    32 non-null     float64\n",
            " 3   hp      32 non-null     int64  \n",
            " 4   drat    32 non-null     float64\n",
            " 5   wt      32 non-null     float64\n",
            " 6   qsec    32 non-null     float64\n",
            " 7   vs      32 non-null     int64  \n",
            " 8   am      32 non-null     int64  \n",
            " 9   gear    32 non-null     int64  \n",
            " 10  carb    32 non-null     int64  \n",
            "dtypes: float64(5), int64(6)\n",
            "memory usage: 4.0+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail(2) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "eJv4rJvkHzG1",
        "outputId": "002f609b-6547-400b-e744-80a65d1f95b9"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                mpg  cyl   disp   hp  drat    wt  qsec  vs  am  gear  carb\n",
              "Maserati Bora  15.0    8  301.0  335  3.54  3.57  14.6   0   1     5     8\n",
              "Volvo 142E     21.4    4  121.0  109  4.11  2.78  18.6   1   1     4     2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a6bb2046-249f-4cc4-b45a-933e811a65ce\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpg</th>\n",
              "      <th>cyl</th>\n",
              "      <th>disp</th>\n",
              "      <th>hp</th>\n",
              "      <th>drat</th>\n",
              "      <th>wt</th>\n",
              "      <th>qsec</th>\n",
              "      <th>vs</th>\n",
              "      <th>am</th>\n",
              "      <th>gear</th>\n",
              "      <th>carb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Maserati Bora</th>\n",
              "      <td>15.0</td>\n",
              "      <td>8</td>\n",
              "      <td>301.0</td>\n",
              "      <td>335</td>\n",
              "      <td>3.54</td>\n",
              "      <td>3.57</td>\n",
              "      <td>14.6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Volvo 142E</th>\n",
              "      <td>21.4</td>\n",
              "      <td>4</td>\n",
              "      <td>121.0</td>\n",
              "      <td>109</td>\n",
              "      <td>4.11</td>\n",
              "      <td>2.78</td>\n",
              "      <td>18.6</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a6bb2046-249f-4cc4-b45a-933e811a65ce')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a6bb2046-249f-4cc4-b45a-933e811a65ce button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a6bb2046-249f-4cc4-b45a-933e811a65ce');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "Mk01Ip_Ehk5c",
        "outputId": "4cc0a692-3f64-4973-acd0-30cb7e063b81"
      },
      "source": [
        "#look at last rows\n",
        "df.tail(10) "
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  \\\n",
              "AMC Javelin       15.2    8  304.0  150  3.15  3.435  17.30   0   0     3   \n",
              "Camaro Z28        13.3    8  350.0  245  3.73  3.840  15.41   0   0     3   \n",
              "Pontiac Firebird  19.2    8  400.0  175  3.08  3.845  17.05   0   0     3   \n",
              "Fiat X1-9         27.3    4   79.0   66  4.08  1.935  18.90   1   1     4   \n",
              "Porsche 914-2     26.0    4  120.3   91  4.43  2.140  16.70   0   1     5   \n",
              "Lotus Europa      30.4    4   95.1  113  3.77  1.513  16.90   1   1     5   \n",
              "Ford Pantera L    15.8    8  351.0  264  4.22  3.170  14.50   0   1     5   \n",
              "Ferrari Dino      19.7    6  145.0  175  3.62  2.770  15.50   0   1     5   \n",
              "Maserati Bora     15.0    8  301.0  335  3.54  3.570  14.60   0   1     5   \n",
              "Volvo 142E        21.4    4  121.0  109  4.11  2.780  18.60   1   1     4   \n",
              "\n",
              "                  carb  \n",
              "AMC Javelin          2  \n",
              "Camaro Z28           4  \n",
              "Pontiac Firebird     2  \n",
              "Fiat X1-9            1  \n",
              "Porsche 914-2        2  \n",
              "Lotus Europa         2  \n",
              "Ford Pantera L       4  \n",
              "Ferrari Dino         6  \n",
              "Maserati Bora        8  \n",
              "Volvo 142E           2  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-590f2cda-332d-40b6-95b8-005fcdf32253\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpg</th>\n",
              "      <th>cyl</th>\n",
              "      <th>disp</th>\n",
              "      <th>hp</th>\n",
              "      <th>drat</th>\n",
              "      <th>wt</th>\n",
              "      <th>qsec</th>\n",
              "      <th>vs</th>\n",
              "      <th>am</th>\n",
              "      <th>gear</th>\n",
              "      <th>carb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>AMC Javelin</th>\n",
              "      <td>15.2</td>\n",
              "      <td>8</td>\n",
              "      <td>304.0</td>\n",
              "      <td>150</td>\n",
              "      <td>3.15</td>\n",
              "      <td>3.435</td>\n",
              "      <td>17.30</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Camaro Z28</th>\n",
              "      <td>13.3</td>\n",
              "      <td>8</td>\n",
              "      <td>350.0</td>\n",
              "      <td>245</td>\n",
              "      <td>3.73</td>\n",
              "      <td>3.840</td>\n",
              "      <td>15.41</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pontiac Firebird</th>\n",
              "      <td>19.2</td>\n",
              "      <td>8</td>\n",
              "      <td>400.0</td>\n",
              "      <td>175</td>\n",
              "      <td>3.08</td>\n",
              "      <td>3.845</td>\n",
              "      <td>17.05</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fiat X1-9</th>\n",
              "      <td>27.3</td>\n",
              "      <td>4</td>\n",
              "      <td>79.0</td>\n",
              "      <td>66</td>\n",
              "      <td>4.08</td>\n",
              "      <td>1.935</td>\n",
              "      <td>18.90</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Porsche 914-2</th>\n",
              "      <td>26.0</td>\n",
              "      <td>4</td>\n",
              "      <td>120.3</td>\n",
              "      <td>91</td>\n",
              "      <td>4.43</td>\n",
              "      <td>2.140</td>\n",
              "      <td>16.70</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lotus Europa</th>\n",
              "      <td>30.4</td>\n",
              "      <td>4</td>\n",
              "      <td>95.1</td>\n",
              "      <td>113</td>\n",
              "      <td>3.77</td>\n",
              "      <td>1.513</td>\n",
              "      <td>16.90</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ford Pantera L</th>\n",
              "      <td>15.8</td>\n",
              "      <td>8</td>\n",
              "      <td>351.0</td>\n",
              "      <td>264</td>\n",
              "      <td>4.22</td>\n",
              "      <td>3.170</td>\n",
              "      <td>14.50</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ferrari Dino</th>\n",
              "      <td>19.7</td>\n",
              "      <td>6</td>\n",
              "      <td>145.0</td>\n",
              "      <td>175</td>\n",
              "      <td>3.62</td>\n",
              "      <td>2.770</td>\n",
              "      <td>15.50</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Maserati Bora</th>\n",
              "      <td>15.0</td>\n",
              "      <td>8</td>\n",
              "      <td>301.0</td>\n",
              "      <td>335</td>\n",
              "      <td>3.54</td>\n",
              "      <td>3.570</td>\n",
              "      <td>14.60</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Volvo 142E</th>\n",
              "      <td>21.4</td>\n",
              "      <td>4</td>\n",
              "      <td>121.0</td>\n",
              "      <td>109</td>\n",
              "      <td>4.11</td>\n",
              "      <td>2.780</td>\n",
              "      <td>18.60</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-590f2cda-332d-40b6-95b8-005fcdf32253')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-590f2cda-332d-40b6-95b8-005fcdf32253 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-590f2cda-332d-40b6-95b8-005fcdf32253');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "7Hxb10xChiAf",
        "outputId": "0fbc0bec-b9de-4be7-dc23-58a7839dcb07"
      },
      "source": [
        "#get a summary of the dataset\n",
        "df.describe()"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             mpg        cyl        disp          hp       drat         wt  \\\n",
              "count  32.000000  32.000000   32.000000   32.000000  32.000000  32.000000   \n",
              "mean   20.090625   6.187500  230.721875  146.687500   3.596563   3.217250   \n",
              "std     6.026948   1.785922  123.938694   68.562868   0.534679   0.978457   \n",
              "min    10.400000   4.000000   71.100000   52.000000   2.760000   1.513000   \n",
              "25%    15.425000   4.000000  120.825000   96.500000   3.080000   2.581250   \n",
              "50%    19.200000   6.000000  196.300000  123.000000   3.695000   3.325000   \n",
              "75%    22.800000   8.000000  326.000000  180.000000   3.920000   3.610000   \n",
              "max    33.900000   8.000000  472.000000  335.000000   4.930000   5.424000   \n",
              "\n",
              "            qsec         vs         am       gear     carb  \n",
              "count  32.000000  32.000000  32.000000  32.000000  32.0000  \n",
              "mean   17.848750   0.437500   0.406250   3.687500   2.8125  \n",
              "std     1.786943   0.504016   0.498991   0.737804   1.6152  \n",
              "min    14.500000   0.000000   0.000000   3.000000   1.0000  \n",
              "25%    16.892500   0.000000   0.000000   3.000000   2.0000  \n",
              "50%    17.710000   0.000000   0.000000   4.000000   2.0000  \n",
              "75%    18.900000   1.000000   1.000000   4.000000   4.0000  \n",
              "max    22.900000   1.000000   1.000000   5.000000   8.0000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a343c38a-9b3f-498d-84ef-cbc3c7463f6f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpg</th>\n",
              "      <th>cyl</th>\n",
              "      <th>disp</th>\n",
              "      <th>hp</th>\n",
              "      <th>drat</th>\n",
              "      <th>wt</th>\n",
              "      <th>qsec</th>\n",
              "      <th>vs</th>\n",
              "      <th>am</th>\n",
              "      <th>gear</th>\n",
              "      <th>carb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>20.090625</td>\n",
              "      <td>6.187500</td>\n",
              "      <td>230.721875</td>\n",
              "      <td>146.687500</td>\n",
              "      <td>3.596563</td>\n",
              "      <td>3.217250</td>\n",
              "      <td>17.848750</td>\n",
              "      <td>0.437500</td>\n",
              "      <td>0.406250</td>\n",
              "      <td>3.687500</td>\n",
              "      <td>2.8125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>6.026948</td>\n",
              "      <td>1.785922</td>\n",
              "      <td>123.938694</td>\n",
              "      <td>68.562868</td>\n",
              "      <td>0.534679</td>\n",
              "      <td>0.978457</td>\n",
              "      <td>1.786943</td>\n",
              "      <td>0.504016</td>\n",
              "      <td>0.498991</td>\n",
              "      <td>0.737804</td>\n",
              "      <td>1.6152</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>10.400000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>71.100000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>2.760000</td>\n",
              "      <td>1.513000</td>\n",
              "      <td>14.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>15.425000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>120.825000</td>\n",
              "      <td>96.500000</td>\n",
              "      <td>3.080000</td>\n",
              "      <td>2.581250</td>\n",
              "      <td>16.892500</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>19.200000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>196.300000</td>\n",
              "      <td>123.000000</td>\n",
              "      <td>3.695000</td>\n",
              "      <td>3.325000</td>\n",
              "      <td>17.710000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>22.800000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>326.000000</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>3.920000</td>\n",
              "      <td>3.610000</td>\n",
              "      <td>18.900000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>33.900000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>472.000000</td>\n",
              "      <td>335.000000</td>\n",
              "      <td>4.930000</td>\n",
              "      <td>5.424000</td>\n",
              "      <td>22.900000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>8.0000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a343c38a-9b3f-498d-84ef-cbc3c7463f6f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a343c38a-9b3f-498d-84ef-cbc3c7463f6f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a343c38a-9b3f-498d-84ef-cbc3c7463f6f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SoJLJMlceORN"
      },
      "source": [
        " \n",
        "# Create basic charts\n",
        "\n",
        "- Line chart\n",
        "- Bar chart\n",
        "- Histogram\n",
        "- Box plot\n",
        "- Scatter plot\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "hDUTvlJXdMaf",
        "outputId": "06810e9d-f28c-4c42-c987-fa3eab2b142f"
      },
      "source": [
        "#Line chart\n",
        "df['mpg'].plot.line(color='purple')"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f047ac89be0>"
            ]
          },
          "metadata": {},
          "execution_count": 52
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "id": "ZqEk5ue2kTHA",
        "outputId": "2ba6e31e-d48f-4e59-a3d1-ec85f087fa41"
      },
      "source": [
        "#Bar chart\n",
        "df['mpg'].plot.bar(color='green', xticks=[0,10,20,30,40])"
      ],
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f047a354580>"
            ]
          },
          "metadata": {},
          "execution_count": 67
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f4i3cnmhkSwr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "outputId": "002a5a41-8999-4f8d-93d5-ac0a5bdf2f54"
      },
      "source": [
        "#Histogram\n",
        "df['mpg'].plot.hist(bins=55,title='Miles Per Gallon', color= 'pink')"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f047a3de430>"
            ]
          },
          "metadata": {},
          "execution_count": 72
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "HxD2cW6QeQE0",
        "outputId": "5f2224c3-5e6e-4c5e-dfd8-baf5cd53a171"
      },
      "source": [
        "#Boxplot\n",
        "df['mpg'].plot.box(color ='blue', ylabel = 'test', title = 'MY CHART')\n"
      ],
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0479eff8b0>"
            ]
          },
          "metadata": {},
          "execution_count": 73
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "eVOSIP8SeYg3",
        "outputId": "202682d6-f5a7-4a12-ad14-b7b3e9fea9fb"
      },
      "source": [
        "#Scatter plot\n",
        "df.plot.scatter(x='mpg',y='hp',c='orange')"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0479ec5c10>"
            ]
          },
          "metadata": {},
          "execution_count": 74
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}